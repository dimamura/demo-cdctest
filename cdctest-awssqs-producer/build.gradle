buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
       classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.2.5.RELEASE'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

apply plugin: 'eclipse'
apply plugin: 'spring-cloud-contract'

group = 'jp.co.ogis_ri.rd.nautible.cdctest'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = '1.8'

jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Created-By': "Gradle ${gradle.gradleVersion}",
            'Built-By': "${System.properties['user.name']}",
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets.test {
    java.srcDirs = ['src/test/java', 'src/test/gen-java']
    resources.srcDirs = ['src/test/resources', 'src/test/gen-resources']
}

repositories {
    mavenCentral()
    mavenLocal()
}

ext {

    localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
    queueGroupId = 'jp.co.ogis_ri.rd.nautible.cdctest'
    queueArtifactId = 'cdctest-awssqs-queue'
    queueVersion = '0.1.0-SNAPSHOT'

}

dependencies {

    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.5.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws-messaging:2.2.5.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-web:2.3.7.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.3.7.RELEASE'

    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

    testImplementation('org.springframework.boot:spring-boot-starter-test:2.3.7.RELEASE') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.11.3'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier:2.2.5.RELEASE'

}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR9'
    }
}

task cleanGenSrc {
    delete 'src/test/gen-java/*'
    delete 'src/test/gen-resources/*'
}

task setupContracts {

    def queueContractsJar = localMavenRepo + '/' + queueGroupId.replace('.', '/') + '/' + queueArtifactId + '/' + queueVersion + '/' + queueArtifactId + '-' + queueVersion + '-stubs.jar'

    copy {
        from zipTree(queueContractsJar)
        into "${projectDir}/src/test/gen-resources/."
        include 'META-INF/**/contracts/**'
        eachFile {
            path = path.substring(path.indexOf('/contracts/'))
        }
        includeEmptyDirs = false
    }

}

contracts {

    testFramework = 'JUNIT5'
    testMode = 'EXPLICIT'
    contractsDslDir = file("${projectDir}/src/test/gen-resources/contracts")
    generatedTestSourcesDir = project.file('src/test/gen-java')
    generatedTestResourcesDir = project.file('src/test/gen-resources')
    basePackageForTests = 'jp.co.ogis_ri.rd.nautible.cdctest.awssqs.producer'
    packageWithBaseClasses = 'jp.co.ogis_ri.rd.nautible.cdctest.awssqs.producer'

}

test {
    useJUnitPlatform()
    systemProperty 'file.encoding', 'utf-8'
}

setupContracts.dependsOn(cleanGenSrc)
generateContractTests.dependsOn(setupContracts)
test.dependsOn(generateContractTests)

